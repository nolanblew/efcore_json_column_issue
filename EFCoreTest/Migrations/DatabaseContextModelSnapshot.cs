// <auto-generated />
using System;
using EFCoreTest;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreTest.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCoreTest.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BestFriendId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BestFriendId");

                    b.ToTable("People", (string)null);
                });

            modelBuilder.Entity("EFCoreTest.Models.Person", b =>
                {
                    b.HasOne("EFCoreTest.Models.Person", "BestFriend")
                        .WithMany()
                        .HasForeignKey("BestFriendId");

                    b.OwnsMany("EFCoreTest.Models.Person.Pets#EFCoreTest.Models.Animal", "Pets", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("Legs")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonId", "Id");

                            b1.ToTable("People", (string)null);

                            b1.ToJson("Pets");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");

                            b1.OwnsMany("EFCoreTest.Models.Person.Pets#EFCoreTest.Models.Animal.AcceptableFood#EFCoreTest.Models.Food", "AcceptableFood", b2 =>
                                {
                                    b2.Property<int>("AnimalPersonId")
                                        .HasColumnType("int");

                                    b2.Property<int>("AnimalId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<double>("Amount")
                                        .HasColumnType("float");

                                    b2.Property<string>("Brand")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<int>("TimesPerDay")
                                        .HasColumnType("int");

                                    b2.HasKey("AnimalPersonId", "AnimalId", "Id");

                                    b2.ToTable("People", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("AnimalPersonId", "AnimalId");
                                });

                            b1.Navigation("AcceptableFood");
                        });

                    b.Navigation("BestFriend");

                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
